Will
The basic monitor just clones the whole object as we discussed

I do not really know how to implement Wait, Notify, and NotifyAll
They could probably be implemented using conditions of the reentrant lock
but I dont know how reverting the object gets handled in this context.

The class currently compiles, but I have not tested for functionallity

Currently, all the references to Object could just be replaced with generics
but this would not be extendable to the partitioned implementation of this lock
(where there is a list of objects as opposed to just one)

I am basically just using the reentrant lock as a semaphore

all the functions that have "if(Thread.currentThread().equals(owner))" should 
probably throw an illegal monitor state exception. I am just leaving it out
because, for testing, dont want to have to make a bunch of try-catch blocks


-------------
Brad

I'm thinking about how to implement wait, notify, and notifyAll.
Consider a BasicMonitor controlling a String S. S starts as "".
Thread t1 acquires the monitor, changes S to "foo", and waits.
Thread t2 now acquires S, changes it to "bar", but then decides to abort.
I imagine t2 would revert S back to "foo", notify t1, and terminate itself.
Next say t1 decides to abort as well. S should be changed back to "".

This scenario makes me think that we need potentially need to track multiple revertStates.
This could be implemented with a Stack, but that would only work if
we could be sure that waits and notifies worked as a queue.
Instead, I think I'll try implementing it as a Map of Threads to Objects (states).

I've implemented a wait, notify, and notifyAll as such.
I've also added BasicMonitorMain1 as a simple test (basically the scenario above).
I hope that all makes sense and I don't have any flaws in my logic.

---------------
Brad 11/1/16

I made some more formal tests for our BasicMonitor.
I realize that, since we are only doing a shallow copy of the monitored object,
the user would need to re-create the object they would need to use for every update.
I believe performing a deep copy in Java is non-trivial.
Perhaps this could be the next step towards improving our system. 

Other ways to improve our system would be to have write methods
throw an exception if they are executed without the lock.

Finally, I wonder if we should allow others to read the monitored object
without the lock.
